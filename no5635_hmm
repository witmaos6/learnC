/*입력: 첫째 줄에 반에 있는 학생의 수 n이 주어진다. (1 ≤ n ≤ 100)

다음 n개 줄에는 각 학생의 이름과 생일이 "이름 dd mm yyyy"와 같은 형식으로 주어진다. 이름은 그 학생의 이름이며, 최대 15글자로 이루어져 있다. dd mm yyyy는 생일 일, 월, 연도이다. (1990 ≤ yyyy ≤ 2010, 1 ≤ mm ≤ 12, 1 ≤ dd ≤ 31) 주어지는 생일은 올바른 날짜이며, 연, 월 일은 0으로 시작하지 않는다.

이름이 같거나, 생일이 같은 사람은 없다.
*/
//출력: 첫째 줄에 가장 나이가 적은 사람의 이름, 둘째 줄에 가장 나이가 많은 사람 이름을 출력한다.

#include <iostream>
using std::cin;
using std::cout;
using std::endl;
using std::string;

class Birth {
public:
	void Binput(int n,string name[], int day[], int month[], int year[]);
	int Oldsearch(int n, int day[], int month[], int year[]);
	int Youngsearch(int n, int day[], int month[], int year[]);
};

void Birth::Binput(int n, string name[], int day[], int month[], int year[]) {
	for (int i = 0; i < n; i++) {
		cin >> name[i] >> day[i] >> month[i] >> year[i];
	}
}
int Birth::Oldsearch(int n, int day[], int month[], int year[]) {
	int OldKey = year[0];
	int j = 0;
	for (int i = 1; i < n; i++) {
		if (OldKey > year[i]) {
			OldKey = year[i];
			j = i;
		}
		else if (OldKey == year[i]) {
			if (month[j] > month[i]) {
				OldKey = year[i];
				j = i;
			}
			else if (month[j] == month[i]) {
				if (day[j] > day[i]) {
					OldKey = year[i]; 
					j = i;
				}
				else if (day[j] == day[i]) { cout << "잘못된 입력입니다."; }
				else continue;
			}
			else continue;
		}
		else continue;
	}
	return j;
}

int Birth::Youngsearch(int n, int day[], int month[], int year[]) {
	int YoungKey = year[0];
	int k = 0;
	for (int i = 1; i < n; i++) {
		if (YoungKey < year[i]) {
			YoungKey = year[i];
			k = i;
		}
		else if (YoungKey == year[i]) {
			if (month[k] < month[i]) {
				YoungKey = year[i];
				k = i;
			}
			else if (month[k] == month[i]) {
				if (day[k] < day[i]) {
					YoungKey = year[i];
					k = i;
				}
				else if (day[k] == day[i]) { cout << "잘못된 입력입니다."; }
				else continue;
			}
			else continue;
		}
		else continue;
	}
	return k;
}

int main(void) {
	Birth N;
	int n;
	do {
		cin >> n;
	} while (n < 1 || n>100);
	
	string* name = new string[n];
	int* day = new int[n];
	int* month = new int[n];
	int* year = new int[n];

	N.Binput(n, name, day, month, year);
	for (int i = 0; i < n; i++) {
		cout << name[i] << " " << year[i] << " " << month[i] << " " << day[i] << endl;
	}
	int Young = N.Youngsearch(n, day, month, year);
	cout << name[Young] << endl;
	int Old = N.Oldsearch(n, day, month, year);
	cout << name[Old];
}
