//높이와 너비 int값을 가지고 있는 배열이 있다. 자신보다 높이와 너비가 작은 원소를 찾을 때 가장 많이 찾을 수 있는 경우를 찾아라
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef struct Envelope
{
	int width;
	int height;
	Envelope(int width, int height) :width(width), height(height) {}
}Envelope;

struct compare
{
	bool operator()(Envelope first, Envelope second)
	{
		if ((first.width * first.height) == (second.width * second.height))
		{
			return (first.width * first.height) < (second.width * second.height);
		}
		return (first.width * first.height) < (second.width * second.height);
	}
};
class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) 
	{
		priority_queue<Envelope, vector<Envelope>, compare> pq;
		for (unsigned int i = 0; i < envelopes.size(); i++)
		{
			pq.push(Envelope(envelopes[i][0], envelopes[i][1]));
		}

		int theNumberOfDoll = 1;
		Envelope lowEnvelope = pq.top();
		cout << lowEnvelope.width << ' ' << lowEnvelope.height << '\n';
		pq.pop();
		while (!pq.empty())
		{
			if ((lowEnvelope.width > pq.top().width) &&
				lowEnvelope.height > pq.top().height)
			{
				theNumberOfDoll++;
				lowEnvelope = pq.top();
				cout << lowEnvelope.width << ' ' << lowEnvelope.height << '\n';
				pq.pop();
			}
			else
			{
				pq.pop();
			}
		}

		return theNumberOfDoll;
    }
	void printPQ(priority_queue<Envelope, vector<Envelope>, compare> pq);
};

int main(void)
{
	vector<vector<int>> envelopes = { {7,8},{12,16} ,{12,5},{1,8},{4,19},{3,15},{4,10},{9,16} };

	Solution solution;
	cout << solution.maxEnvelopes(envelopes);

	return 0;
}

void Solution::printPQ(priority_queue<Envelope, vector<Envelope>, compare> pq)
{
	cout << pq.top().width << ' ' << pq.top().height;
	pq.pop();
}
//사용한 STL 우선순위큐
//사용한 알고리즘 그리디
// 높이와 넓이의 합이 가장 큰 순서부터 정렬도 해보고 가장 작은 순서부터 정렬도 해보고 곱셉으로도 해봤지만 반례가 존재한다.
// 다른 방식으로 접근해야 할 것 같아(코드를 다 갈아엎어야 할 것 같아) 일단 여기서 올린다.
