//입력: 보석의 개수, 가방의 개수, 보석의 각 무게와 가격, 가방에 넣을 수 있는 최대 무게
//출력: 훔칠 수 있는 보석의 최대 
#include <iostream>
#include <queue>
using std::cin;
using std::cout;
using std::priority_queue;
using std::vector;
using std::ios_base;

int qcompare(const void* a, const void* b) {
	const int* x = (int*)a;
	const int* y = (int*)b;
	if (*x > *y) return 1;
	else if (*x < *y)return -1;
	return 0;
}

class theif {
private:
	int N = 0, K = 0;
	struct jew {
		int weight;
		int price;
		jew(int a, int b) :weight(a), price(b) {}
	};
	struct compare {
		bool operator()(jew a, jew b) {
			if (a.weight == b.weight) { //무게가 같을 때 비싼 것 우선
				return a.price < b.price;
			}
			return a.weight > b.weight; // 가벼운 것 우선
		}
	};
	priority_queue<jew, vector<jew>, compare>pq;
	priority_queue<int, vector<int>>temp;
public:
	void JewBagInput(int n, int k) {
		cin >> n >> k;
		N = n;
		K = k;
	}
	void JewWPinput() {
		int M, V;
		for (int i = 0; i < N; i++) {
			cin >> M >> V;
			pq.push(jew(M, V));
		}
	}
	int theifSucces() {
		int* bagWeight = new int[K];
		for (int i = 0; i < K; i++) {
			cin >> bagWeight[i];
		}
		qsort(bagWeight, K, sizeof(int), qcompare);
		long long total = 0;
		for (int i = 0; i < K; i++) {
			while (!pq.empty()) {
				if (pq.top().weight > bagWeight[i]) break;
				temp.push(pq.top().price);
				pq.pop();
			}
			if (temp.empty()) continue;
			total += temp.top();
			temp.pop();
		}
		delete[] bagWeight;
		return total;
	}
};

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	theif kid;

	int N = 0, K = 0;
	kid.JewBagInput(N, K);
	kid.JewWPinput();
	cout << kid.theifSucces();

	return 0;
}
